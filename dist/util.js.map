{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import type EthQuery from '@metamask/eth-query';\r\nimport type { Hex, Json } from '@metamask/utils';\r\nimport { isStrictHexString } from '@metamask/utils';\r\nimport ensNamehash from 'eth-ens-namehash';\r\nimport {\r\n  addHexPrefix,\r\n  isValidAddress,\r\n  isHexString,\r\n  BN,\r\n  toChecksumAddress,\r\n  stripHexPrefix,\r\n} from 'ethereumjs-util';\r\nimport { fromWei, toWei } from 'ethjs-unit';\r\nimport deepEqual from 'fast-deep-equal';\r\n\r\nimport { MAX_SAFE_CHAIN_ID } from './constants';\r\n\r\nconst TIMEOUT_ERROR = new Error('timeout');\r\n\r\n/**\r\n * Checks whether the given number primitive chain ID is safe.\r\n * Because some cryptographic libraries we use expect the chain ID to be a\r\n * number primitive, it must not exceed a certain size.\r\n *\r\n * @param chainId - The chain ID to check for safety.\r\n * @returns Whether the given chain ID is safe.\r\n */\r\nexport function isSafeChainId(chainId: Hex): boolean {\r\n  if (!isHexString(chainId)) {\r\n    return false;\r\n  }\r\n  const decimalChainId = Number.parseInt(chainId);\r\n  return (\r\n    Number.isSafeInteger(decimalChainId) &&\r\n    decimalChainId > 0 &&\r\n    decimalChainId <= MAX_SAFE_CHAIN_ID\r\n  );\r\n}\r\n/**\r\n * Converts a BN object to a hex string with a '0x' prefix.\r\n *\r\n * @param inputBn - BN instance to convert to a hex string.\r\n * @returns A '0x'-prefixed hex string.\r\n */\r\nexport function BNToHex(inputBn: any) {\r\n  return addHexPrefix(inputBn.toString(16));\r\n}\r\n\r\n/**\r\n * Used to multiply a BN by a fraction.\r\n *\r\n * @param targetBN - Number to multiply by a fraction.\r\n * @param numerator - Numerator of the fraction multiplier.\r\n * @param denominator - Denominator of the fraction multiplier.\r\n * @returns Product of the multiplication.\r\n */\r\nexport function fractionBN(\r\n  targetBN: any,\r\n  numerator: number | string,\r\n  denominator: number | string,\r\n) {\r\n  const numBN = new BN(numerator);\r\n  const denomBN = new BN(denominator);\r\n  return targetBN.mul(numBN).div(denomBN);\r\n}\r\n\r\n/**\r\n * Used to convert a base-10 number from GWEI to WEI. Can handle numbers with decimal parts.\r\n *\r\n * @param n - The base 10 number to convert to WEI.\r\n * @returns The number in WEI, as a BN.\r\n */\r\nexport function gweiDecToWEIBN(n: number | string) {\r\n  if (Number.isNaN(n)) {\r\n    return new BN(0);\r\n  }\r\n\r\n  const parts = n.toString().split('.');\r\n  const wholePart = parts[0] || '0';\r\n  let decimalPart = parts[1] || '';\r\n\r\n  if (!decimalPart) {\r\n    return toWei(wholePart, 'gwei');\r\n  }\r\n\r\n  if (decimalPart.length <= 9) {\r\n    return toWei(`${wholePart}.${decimalPart}`, 'gwei');\r\n  }\r\n\r\n  const decimalPartToRemove = decimalPart.slice(9);\r\n  const decimalRoundingDigit = decimalPartToRemove[0];\r\n\r\n  decimalPart = decimalPart.slice(0, 9);\r\n  let wei = toWei(`${wholePart}.${decimalPart}`, 'gwei');\r\n\r\n  if (Number(decimalRoundingDigit) >= 5) {\r\n    wei = wei.add(new BN(1));\r\n  }\r\n\r\n  return wei;\r\n}\r\n\r\n/**\r\n * Used to convert values from wei hex format to dec gwei format.\r\n *\r\n * @param hex - The value in hex wei.\r\n * @returns The value in dec gwei as string.\r\n */\r\nexport function weiHexToGweiDec(hex: string) {\r\n  const hexWei = new BN(stripHexPrefix(hex), 16);\r\n  return fromWei(hexWei, 'gwei').toString(10);\r\n}\r\n\r\n/**\r\n * Return a URL that can be used to obtain ETH for a given network.\r\n *\r\n * @param networkCode - Network code of desired network.\r\n * @param address - Address to deposit obtained ETH.\r\n * @param amount - How much ETH is desired.\r\n * @returns URL to buy ETH based on network.\r\n */\r\nexport function getBuyURL(\r\n  networkCode = '1',\r\n  address?: string,\r\n  amount = 5,\r\n): string | undefined {\r\n  switch (networkCode) {\r\n    case '1':\r\n      return `https://buy.coinbase.com/?code=9ec56d01-7e81-5017-930c-513daa27bb6a&amount=${amount}&address=${address}&crypto_currency=ETH`;\r\n    case '5':\r\n      return 'https://goerli-faucet.slock.it/';\r\n    case '11155111':\r\n      return 'https://sepoliafaucet.net/';\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Converts a hex string to a BN object.\r\n *\r\n * @param inputHex - Number represented as a hex string.\r\n * @returns A BN instance.\r\n */\r\nexport function hexToBN(inputHex: string) {\r\n  return inputHex ? new BN(stripHexPrefix(inputHex), 16) : new BN(0);\r\n}\r\n\r\n/**\r\n * A helper function that converts hex data to human readable string.\r\n *\r\n * @param hex - The hex string to convert to string.\r\n * @returns A human readable string conversion.\r\n */\r\nexport function hexToText(hex: string) {\r\n  try {\r\n    const stripped = stripHexPrefix(hex);\r\n    const buff = Buffer.from(stripped, 'hex');\r\n    return buff.toString('utf8');\r\n  } catch (e) {\r\n    /* istanbul ignore next */\r\n    return hex;\r\n  }\r\n}\r\n\r\n/**\r\n * Parses a hex string and converts it into a number that can be operated on in a bignum-safe,\r\n * base-10 way.\r\n *\r\n * @param value - A base-16 number encoded as a string.\r\n * @returns The number as a BN object in base-16 mode.\r\n */\r\nexport function fromHex(value: string | BN): BN {\r\n  if (BN.isBN(value)) {\r\n    return value;\r\n  }\r\n  return new BN(hexToBN(value).toString(10));\r\n}\r\n\r\n/**\r\n * Converts an integer to a hexadecimal representation.\r\n *\r\n * @param value - An integer, an integer encoded as a base-10 string, or a BN.\r\n * @returns The integer encoded as a hex string.\r\n */\r\nexport function toHex(value: number | string | BN): Hex {\r\n  if (typeof value === 'string' && isStrictHexString(value)) {\r\n    return value;\r\n  }\r\n  const hexString = BN.isBN(value)\r\n    ? value.toString(16)\r\n    : new BN(value.toString(), 10).toString(16);\r\n  return `0x${hexString}`;\r\n}\r\n\r\n/**\r\n * Execute and return an asynchronous operation without throwing errors.\r\n *\r\n * @param operation - Function returning a Promise.\r\n * @param logError - Determines if the error should be logged.\r\n * @returns Promise resolving to the result of the async operation.\r\n */\r\nexport async function safelyExecute(\r\n  operation: () => Promise<any>,\r\n  logError = false,\r\n) {\r\n  try {\r\n    return await operation();\r\n  } catch (error: any) {\r\n    /* istanbul ignore next */\r\n    if (logError) {\r\n      console.error(error);\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Execute and return an asynchronous operation with a timeout.\r\n *\r\n * @param operation - Function returning a Promise.\r\n * @param logError - Determines if the error should be logged.\r\n * @param timeout - Timeout to fail the operation.\r\n * @returns Promise resolving to the result of the async operation.\r\n */\r\nexport async function safelyExecuteWithTimeout(\r\n  operation: () => Promise<any>,\r\n  logError = false,\r\n  timeout = 500,\r\n) {\r\n  try {\r\n    return await Promise.race([\r\n      operation(),\r\n      new Promise<void>((_, reject) =>\r\n        setTimeout(() => {\r\n          reject(TIMEOUT_ERROR);\r\n        }, timeout),\r\n      ),\r\n    ]);\r\n  } catch (error) {\r\n    /* istanbul ignore next */\r\n    if (logError) {\r\n      console.error(error);\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert an address to a checksummed hexidecimal address.\r\n *\r\n * @param address - The address to convert.\r\n * @returns A 0x-prefixed hexidecimal checksummed address.\r\n */\r\nexport function toChecksumHexAddress(address: string) {\r\n  const hexPrefixed = addHexPrefix(address);\r\n  if (!isHexString(hexPrefixed)) {\r\n    // Version 5.1 of ethereumjs-utils would have returned '0xY' for input 'y'\r\n    // but we shouldn't waste effort trying to change case on a clearly invalid\r\n    // string. Instead just return the hex prefixed original string which most\r\n    // closely mimics the original behavior.\r\n    return hexPrefixed;\r\n  }\r\n  return toChecksumAddress(hexPrefixed);\r\n}\r\n\r\n/**\r\n * Validates that the input is a hex address. This utility method is a thin\r\n * wrapper around ethereumjs-util.isValidAddress, with the exception that it\r\n * by default will return true for hex strings that meet the length requirement\r\n * of a hex address, but are not prefixed with `0x`.\r\n *\r\n * @param possibleAddress - Input parameter to check against.\r\n * @param options - The validation options.\r\n * @param options.allowNonPrefixed - If true will allow addresses without `0x` prefix.`\r\n * @returns Whether or not the input is a valid hex address.\r\n */\r\nexport function isValidHexAddress(\r\n  possibleAddress: string,\r\n  { allowNonPrefixed = true } = {},\r\n) {\r\n  const addressToCheck = allowNonPrefixed\r\n    ? addHexPrefix(possibleAddress)\r\n    : possibleAddress;\r\n  if (!isHexString(addressToCheck)) {\r\n    return false;\r\n  }\r\n\r\n  return isValidAddress(addressToCheck);\r\n}\r\n\r\n/**\r\n * Returns whether the given code corresponds to a smart contract.\r\n *\r\n * @param code - The potential smart contract code.\r\n * @returns Whether the code was smart contract code or not.\r\n */\r\nexport function isSmartContractCode(code: string) {\r\n  /* istanbul ignore if */\r\n  if (!code) {\r\n    return false;\r\n  }\r\n  // Geth will return '0x', and ganache-core v2.2.1 will return '0x0'\r\n  const smartContractCode = code !== '0x' && code !== '0x0';\r\n  return smartContractCode;\r\n}\r\n\r\n/**\r\n * Execute fetch and verify that the response was successful.\r\n *\r\n * @param request - Request information.\r\n * @param options - Fetch options.\r\n * @returns The fetch response.\r\n */\r\nexport async function successfulFetch(request: string, options?: RequestInit) {\r\n  const response = await fetch(request, options);\r\n  if (!response.ok) {\r\n    throw new Error(\r\n      `Fetch failed with status '${response.status}' for request '${request}'`,\r\n    );\r\n  }\r\n  return response;\r\n}\r\n\r\n/**\r\n * Execute fetch and return object response.\r\n *\r\n * @param request - The request information.\r\n * @param options - The fetch options.\r\n * @returns The fetch response JSON data.\r\n */\r\nexport async function handleFetch(request: string, options?: RequestInit) {\r\n  const response = await successfulFetch(request, options);\r\n  const object = await response.json();\r\n  return object;\r\n}\r\n\r\n/**\r\n * Execute fetch and return object response, log if known error thrown, otherwise rethrow error.\r\n *\r\n * @param request - the request options object\r\n * @param request.url - The request url to query.\r\n * @param request.options - The fetch options.\r\n * @param request.timeout - Timeout to fail request\r\n * @param request.errorCodesToCatch - array of error codes for errors we want to catch in a particular context\r\n * @returns The fetch response JSON data or undefined (if error occurs).\r\n */\r\nexport async function fetchWithErrorHandling({\r\n  url,\r\n  options,\r\n  timeout,\r\n  errorCodesToCatch,\r\n}: {\r\n  url: string;\r\n  options?: RequestInit;\r\n  timeout?: number;\r\n  errorCodesToCatch?: number[];\r\n}) {\r\n  let result;\r\n  try {\r\n    if (timeout) {\r\n      result = Promise.race([\r\n        await handleFetch(url, options),\r\n        new Promise<Response>((_, reject) =>\r\n          setTimeout(() => {\r\n            reject(TIMEOUT_ERROR);\r\n          }, timeout),\r\n        ),\r\n      ]);\r\n    } else {\r\n      result = await handleFetch(url, options);\r\n    }\r\n  } catch (e) {\r\n    logOrRethrowError(e, errorCodesToCatch);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Fetch that fails after timeout.\r\n *\r\n * @param url - Url to fetch.\r\n * @param options - Options to send with the request.\r\n * @param timeout - Timeout to fail request.\r\n * @returns Promise resolving the request.\r\n */\r\nexport async function timeoutFetch(\r\n  url: string,\r\n  options?: RequestInit,\r\n  timeout = 500,\r\n): Promise<Response> {\r\n  return Promise.race([\r\n    successfulFetch(url, options),\r\n    new Promise<Response>((_, reject) =>\r\n      setTimeout(() => {\r\n        reject(TIMEOUT_ERROR);\r\n      }, timeout),\r\n    ),\r\n  ]);\r\n}\r\n\r\n/**\r\n * Normalizes the given ENS name.\r\n *\r\n * @param ensName - The ENS name.\r\n * @returns The normalized ENS name string.\r\n */\r\nexport function normalizeEnsName(ensName: string): string | null {\r\n  if (ensName && typeof ensName === 'string') {\r\n    try {\r\n      const normalized = ensNamehash.normalize(ensName.trim());\r\n      // this regex is only sufficient with the above call to ensNamehash.normalize\r\n      // TODO: change 7 in regex to 3 when shorter ENS domains are live\r\n      if (normalized.match(/^(([\\w\\d-]+)\\.)*[\\w\\d-]{7,}\\.(eth|test)$/u)) {\r\n        return normalized;\r\n      }\r\n    } catch (_) {\r\n      // do nothing\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Wrapper method to handle EthQuery requests.\r\n *\r\n * @param ethQuery - EthQuery object initialized with a provider.\r\n * @param method - Method to request.\r\n * @param args - Arguments to send.\r\n * @returns Promise resolving the request.\r\n */\r\nexport function query(\r\n  ethQuery: EthQuery,\r\n  method: string,\r\n  args: any[] = [],\r\n): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    const cb = (error: unknown, result: unknown) => {\r\n      if (error) {\r\n        reject(error);\r\n        return;\r\n      }\r\n      resolve(result);\r\n    };\r\n\r\n    // Using `in` rather than `hasProperty` so that we look up the prototype\r\n    // chain for the method.\r\n    if (method in ethQuery && typeof ethQuery[method] === 'function') {\r\n      ethQuery[method](...args, cb);\r\n    } else {\r\n      ethQuery.sendAsync({ method, params: args }, cb);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Converts valid hex strings to decimal numbers, and handles unexpected arg types.\r\n *\r\n * @param value - a string that is either a hexadecimal with `0x` prefix or a decimal string.\r\n * @returns a decimal number.\r\n */\r\nexport const convertHexToDecimal = (\r\n  value: string | undefined = '0x0',\r\n): number => {\r\n  if (isHexString(value)) {\r\n    return parseInt(value, 16);\r\n  }\r\n\r\n  return Number(value) ? Number(value) : 0;\r\n};\r\n\r\ntype PlainObject = Record<number | string | symbol, unknown>;\r\n\r\n/**\r\n * Determines whether a value is a \"plain\" object.\r\n *\r\n * @param value - A value to check\r\n * @returns True if the passed value is a plain object\r\n */\r\nexport function isPlainObject(value: unknown): value is PlainObject {\r\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\r\n}\r\n\r\n/**\r\n * Like {@link Array}, but always non-empty.\r\n *\r\n * @template T - The non-empty array member type.\r\n */\r\nexport type NonEmptyArray<T> = [T, ...T[]];\r\n\r\n/**\r\n * Type guard for {@link NonEmptyArray}.\r\n *\r\n * @template T - The non-empty array member type.\r\n * @param value - The value to check.\r\n * @returns Whether the value is a non-empty array.\r\n */\r\nexport function isNonEmptyArray<T>(value: T[]): value is NonEmptyArray<T> {\r\n  return Array.isArray(value) && value.length > 0;\r\n}\r\n\r\n/**\r\n * Type guard for {@link Json}.\r\n *\r\n * @param value - The value to check.\r\n * @returns Whether the value is valid JSON.\r\n */\r\nexport function isValidJson(value: unknown): value is Json {\r\n  try {\r\n    return deepEqual(value, JSON.parse(JSON.stringify(value)));\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility method to log if error is a common fetch error and otherwise rethrow it.\r\n *\r\n * @param error - Caught error that we should either rethrow or log to console\r\n * @param codesToCatch - array of error codes for errors we want to catch and log in a particular context\r\n */\r\nfunction logOrRethrowError(error: any, codesToCatch: number[] = []) {\r\n  if (!error) {\r\n    return;\r\n  }\r\n\r\n  const includesErrorCodeToCatch = codesToCatch.some((code) =>\r\n    error.message?.includes(`Fetch failed with status '${code}'`),\r\n  );\r\n\r\n  if (\r\n    error instanceof Error &&\r\n    (includesErrorCodeToCatch ||\r\n      error.message?.includes('Failed to fetch') ||\r\n      error === TIMEOUT_ERROR)\r\n  ) {\r\n    console.error(error);\r\n  } else {\r\n    throw error;\r\n  }\r\n}\r\n"]}