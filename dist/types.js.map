{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACU,QAAA,iBAAiB,GAAG;IAC/B,OAAO,EAAE,SAAS;IAClB,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,SAAS;IAClB,cAAc,EAAE,cAAc;IAC9B,eAAe,EAAE,eAAe;IAChC,cAAc,EAAE,cAAc;IAC9B,cAAc,EAAE,cAAc;CACtB,CAAC;AAKX;;GAEG;AACU,QAAA,WAAW,GAAG,gCACtB,yBAAiB,KACpB,GAAG,EAAE,KAAK,GACF,CAAC;AAIX;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,GAAQ;IACpC,OAAO,MAAM,CAAC,MAAM,CAAC,mBAAW,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAClD,CAAC;AAFD,sCAEC;AAED;;;;GAIG;AACH,IAAY,kBASX;AATD,WAAY,kBAAkB;IAC5B,yCAAmB,CAAA;IACnB,uCAAiB,CAAA;IACjB,yCAAmB,CAAA;IACnB,kDAA4B,CAAA;IAC5B,oDAA8B,CAAA;IAC9B,uCAAiB,CAAA;IACjB,kDAA6B,CAAA;IAC7B,kDAA4B,CAAA;AAC9B,CAAC,EATW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAS7B;AAED;;;;GAIG;AACU,QAAA,OAAO,GAAG;IACrB,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,KAAK;IACnC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,KAAK;IAClC,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,UAAU;IACxC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,YAAY;IACzC,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,QAAQ;IAC1C,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE,QAAQ;IAC3C,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,QAAQ;IAC1C,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,QAAQ;CAClC,CAAC;AAGX;;GAEG;AACU,QAAA,SAAS,GAAG;IACvB,CAAC,yBAAiB,CAAC,OAAO,CAAC,EAAE,GAAG;IAChC,CAAC,yBAAiB,CAAC,MAAM,CAAC,EAAE,GAAG;IAC/B,CAAC,yBAAiB,CAAC,OAAO,CAAC,EAAE,UAAU;IACvC,CAAC,yBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,OAAO;IAC5C,CAAC,yBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,OAAO;IAC7C,CAAC,yBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM;IAC3C,CAAC,yBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM;CACnC,CAAC;AAGX,IAAY,cASX;AATD,WAAY,cAAc;IACxB,iCAAe,CAAA;IACf,sCAAoB,CAAA;IACpB,wCAAsB,CAAA;IACtB,2CAA2B,CAAA;IAC3B,uCAAuB,CAAA;IACvB,uCAAuB,CAAA;IACvB,uCAAuB,CAAA;IACvB,0BAAQ,CAAA;AACV,CAAC,EATW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QASzB","sourcesContent":["/**\r\n * The names of built-in Infura networks\r\n */\r\nexport const InfuraNetworkType = {\r\n  mainnet: 'mainnet',\r\n  goerli: 'goerli',\r\n  sepolia: 'sepolia',\r\n  'linea-goerli': 'linea-goerli',\r\n  'linea-mainnet': 'linea-mainnet',\r\n  'adil-testnet': 'adil-testnet',\r\n  'adil-mainnet': 'adil-mainnet',\r\n} as const;\r\n\r\nexport type InfuraNetworkType =\r\n  (typeof InfuraNetworkType)[keyof typeof InfuraNetworkType];\r\n\r\n/**\r\n * The \"network type\"; either the name of a built-in network, or \"rpc\" for custom networks.\r\n */\r\nexport const NetworkType = {\r\n  ...InfuraNetworkType,\r\n  rpc: 'rpc',\r\n} as const;\r\n\r\nexport type NetworkType = (typeof NetworkType)[keyof typeof NetworkType];\r\n\r\n/**\r\n * A helper to determine whether a given input is NetworkType.\r\n *\r\n * @param val - the value to check whether it is NetworkType or not.\r\n * @returns boolean indicating whether or not the argument is NetworkType.\r\n */\r\nexport function isNetworkType(val: any): val is NetworkType {\r\n  return Object.values(NetworkType).includes(val);\r\n}\r\n\r\n/**\r\n * Names of networks built into the wallet.\r\n *\r\n * This includes both Infura and non-Infura networks.\r\n */\r\nexport enum BuiltInNetworkName {\r\n  Mainnet = 'mainnet',\r\n  Goerli = 'goerli',\r\n  Sepolia = 'sepolia',\r\n  LineaGoerli = 'linea-goerli',\r\n  LineaMainnet = 'linea-mainnet',\r\n  Aurora = 'aurora',\r\n  AdilTestnet =  'adil-testnet',\r\n  AdilMainnet = 'adil-mainnet',\r\n}\r\n\r\n/**\r\n * Decimal string chain IDs of built-in networks, by name.\r\n *\r\n * `toHex` not invoked to avoid cyclic dependency\r\n */\r\nexport const ChainId = {\r\n  [BuiltInNetworkName.Mainnet]: '0x1', // toHex(1)\r\n  [BuiltInNetworkName.Goerli]: '0x5', // toHex(5)\r\n  [BuiltInNetworkName.Sepolia]: '0xaa36a7', // toHex(11155111)\r\n  [BuiltInNetworkName.Aurora]: '0x4e454152', // toHex(1313161554)\r\n  [BuiltInNetworkName.LineaGoerli]: '0xe704', // toHex(59140)\r\n  [BuiltInNetworkName.LineaMainnet]: '0xe708', // toHex(59144)\r\n  [BuiltInNetworkName.AdilTestnet]: '0x1d97',\r\n  [BuiltInNetworkName.AdilMainnet]: '0x1d98',\r\n} as const;\r\nexport type ChainId = (typeof ChainId)[keyof typeof ChainId];\r\n\r\n/**\r\n * Decimal string network IDs of built-in Infura networks, by name.\r\n */\r\nexport const NetworkId = {\r\n  [InfuraNetworkType.mainnet]: '1',\r\n  [InfuraNetworkType.goerli]: '5',\r\n  [InfuraNetworkType.sepolia]: '11155111',\r\n  [InfuraNetworkType['linea-goerli']]: '59140',\r\n  [InfuraNetworkType['linea-mainnet']]: '59144',\r\n  [InfuraNetworkType['adil-testnet']]: '7575',\r\n  [InfuraNetworkType['adil-mainnet']]: '7576',\r\n} as const;\r\nexport type NetworkId = (typeof NetworkId)[keyof typeof NetworkId];\r\n\r\nexport enum NetworksTicker {\r\n  mainnet = 'ETH',\r\n  goerli = 'GoerliETH',\r\n  sepolia = 'SepoliaETH',\r\n  'linea-goerli' = 'LineaETH',\r\n  'linea-mainnet' = 'ETH',\r\n  'adil-testnet' = 'ADIL',\r\n  'adil-mainnet' = 'ADIL',\r\n  rpc = '',\r\n}\r\n"]}