{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { NetworkType, NetworksTicker, ChainId, NetworkId } from './types';\r\n\r\nexport const RPC = 'rpc';\r\nexport const FALL_BACK_VS_CURRENCY = 'ETH';\r\nexport const IPFS_DEFAULT_GATEWAY_URL = 'https://cloudflare-ipfs.com/ipfs/';\r\n\r\n// NETWORKS ID\r\n// `toHex` not invoked to avoid cyclic dependency\r\nexport const GANACHE_CHAIN_ID = '0x539'; // toHex(1337)\r\n/**\r\n * The largest possible chain ID we can handle.\r\n * Explanation: https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553\r\n */\r\nexport const MAX_SAFE_CHAIN_ID = 4503599627370476;\r\n\r\n// TOKEN STANDARDS\r\nexport const ERC721 = 'ERC721';\r\nexport const ERC1155 = 'ERC1155';\r\nexport const ERC20 = 'ERC20';\r\n\r\n// TOKEN INTERFACE IDS\r\nexport const ERC721_INTERFACE_ID = '0x80ac58cd';\r\nexport const ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';\r\nexport const ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';\r\nexport const ERC1155_INTERFACE_ID = '0xd9b67a26';\r\nexport const ERC1155_METADATA_URI_INTERFACE_ID = '0x0e89341c';\r\nexport const ERC1155_TOKEN_RECEIVER_INTERFACE_ID = '0x4e2312e0';\r\n\r\n// UNITS\r\nexport const GWEI = 'gwei';\r\n\r\n// ASSET TYPES\r\nexport const ASSET_TYPES = {\r\n  NATIVE: 'NATIVE',\r\n  TOKEN: 'TOKEN',\r\n  NFT: 'NFT',\r\n  UNKNOWN: 'UNKNOWN',\r\n};\r\n\r\n// TICKER SYMBOLS\r\nexport const TESTNET_TICKER_SYMBOLS = {\r\n  GOERLI: 'GoerliETH',\r\n  SEPOLIA: 'SepoliaETH',\r\n  LINEA_GOERLI: 'LineaETH',\r\n  ADIL: 'ADIL',\r\n};\r\n\r\n/**\r\n * Map of all build-in Infura networks to their network, ticker and chain IDs.\r\n */\r\nexport const BUILT_IN_NETWORKS = {\r\n  [NetworkType.goerli]: {\r\n    chainId: ChainId.goerli,\r\n    ticker: NetworksTicker.goerli,\r\n    rpcPrefs: {\r\n      blockExplorerUrl: `https://${NetworkType.goerli}.etherscan.io`,\r\n    },\r\n  },\r\n  [NetworkType.sepolia]: {\r\n    chainId: ChainId.sepolia,\r\n    ticker: NetworksTicker.sepolia,\r\n    rpcPrefs: {\r\n      blockExplorerUrl: `https://${NetworkType.sepolia}.etherscan.io`,\r\n    },\r\n  },\r\n  [NetworkType.mainnet]: {\r\n    chainId: ChainId.mainnet,\r\n    ticker: NetworksTicker.mainnet,\r\n    rpcPrefs: {\r\n      blockExplorerUrl: 'https://etherscan.io',\r\n    },\r\n  },\r\n  [NetworkType['linea-goerli']]: {\r\n    chainId: ChainId['linea-goerli'],\r\n    ticker: NetworksTicker['linea-goerli'],\r\n    rpcPrefs: {\r\n      blockExplorerUrl: 'https://explorer.goerli.linea.build',\r\n    },\r\n  },\r\n  [NetworkType['linea-mainnet']]: {\r\n    chainId: ChainId['linea-mainnet'],\r\n    ticker: NetworksTicker['linea-mainnet'],\r\n    rpcPrefs: {\r\n      blockExplorerUrl: 'https://lineascan.build',\r\n    },\r\n  },\r\n  [NetworkType['adil-testnet']]: {\r\n    chainId: ChainId['adil-testnet'],\r\n    ticker: NetworksTicker['adil-testnet'],\r\n    rpcPrefs: {\r\n      blockExplorerUrl: 'https://testnet.adilchain-scan.io/',\r\n    },\r\n  },\r\n  [NetworkType['adil-mainnet']]: {\r\n    chainId: ChainId['adil-mainnet'],\r\n    ticker: NetworksTicker['adil-mainnet'],\r\n    rpcPrefs: {\r\n      blockExplorerUrl: 'https://adilchain-scan.io/',\r\n    },\r\n  },\r\n  [NetworkType.rpc]: {\r\n    chainId: undefined,\r\n    blockExplorerUrl: undefined,\r\n    rpcPrefs: undefined,\r\n  },\r\n} as const;\r\n\r\n// APIs\r\nexport const OPENSEA_PROXY_URL =\r\n  'https://proxy.metafi.codefi.network/opensea/v1/api/v1';\r\nexport const OPENSEA_API_URL = 'https://api.opensea.io/api/v1';\r\nexport const OPENSEA_TEST_API_URL = 'https://testnets-api.opensea.io/api/v1';\r\n\r\n// Default origin for controllers\r\nexport const ORIGIN_METAMASK = 'metamask';\r\n\r\n/**\r\n * Approval request types for various operations.\r\n * These types are used by different controllers to create and manage\r\n * approval requests consistently.\r\n */\r\nexport enum ApprovalType {\r\n  AddEthereumChain = 'wallet_addEthereumChain',\r\n  ConnectAccounts = 'connect_accounts',\r\n  EthDecrypt = 'eth_decrypt',\r\n  EthGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\r\n  EthSign = 'eth_sign',\r\n  EthSignTypedData = 'eth_signTypedData',\r\n  PersonalSign = 'personal_sign',\r\n  ResultError = 'result_error',\r\n  ResultSuccess = 'result_success',\r\n  SnapDialogAlert = 'snap_dialog:alert',\r\n  SnapDialogConfirmation = 'snap_dialog:confirmation',\r\n  SnapDialogPrompt = 'snap_dialog:prompt',\r\n  SwitchEthereumChain = 'wallet_switchEthereumChain',\r\n  Transaction = 'transaction',\r\n  Unlock = 'unlock',\r\n  WalletConnect = 'wallet_connect',\r\n  WalletRequestPermissions = 'wallet_requestPermissions',\r\n  WatchAsset = 'wallet_watchAsset',\r\n}\r\n\r\nexport const NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP: Record<\r\n  NetworkId,\r\n  NetworkType\r\n> = {\r\n  [NetworkId.goerli]: NetworkType.goerli,\r\n  [NetworkId.sepolia]: NetworkType.sepolia,\r\n  [NetworkId.mainnet]: NetworkType.mainnet,\r\n  [NetworkId['linea-goerli']]: NetworkType['linea-goerli'],\r\n  [NetworkId['linea-mainnet']]: NetworkType['linea-mainnet'],\r\n  [NetworkId['adil-testnet']]: NetworkType['adil-testnet'],\r\n  [NetworkId['adil-mainnet']]: NetworkType['adil-mainnet'],\r\n};\r\n"]}